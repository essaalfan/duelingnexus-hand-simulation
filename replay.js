(function () {
  // Create download button
  function createDownloadButton(playerName) {
    const button = document.createElement('button');
    button.textContent = 'Download Deck';
    button.className = 'engine-button engine-button-primary';
    button.style.marginTop = '10px';
    button.style.width = '100%';
    
    button.addEventListener('click', () => {
      try {
        console.log('Button clicked for:', playerName);
        console.log('Game object available:', typeof Game);
        console.log('Game object:', Game);
        
        // Try to access Game object directly (should work with world: MAIN)
        if (typeof Game !== 'undefined' && Game.replayMessages) {
          console.log('Game object found:', Game);
          
          // Debug: Log the entire replayMessages structure
          console.log('replayMessages structure:', Game.replayMessages);
          console.log('replayMessages length:', Game.replayMessages.length);
          
          // Extract deck data using only replayMessages
          const playerNames = {
            [0]: Game.replayMessages[2].name,  // Player 1 (PROZ_ESSA)
            [1]: Game.replayMessages[3].name   // Player 2 (Grigro)
          };

          console.log('Player names from replayMessages:', playerNames);
          console.log('Looking for player:', playerName);

          // Find the correct player index by comparing with replayMessages names
          let playerIndex = null;
          if (playerNames[0] === playerName) {
            playerIndex = 0;
          } else if (playerNames[1] === playerName) {
            playerIndex = 1;
          } else {
            // If exact match fails, try to find by partial match or use the button position
            console.log('Exact name match failed, trying alternative matching...');
            // Check if this is the left player (player 0) or right player (player 1)
            const button = event.target;
            const leftPlayerArea = document.querySelector('.game-avatar-area.game-avatar-left');
            const rightPlayerArea = document.querySelector('.game-avatar-area.game-avatar-right');
            
            if (leftPlayerArea && leftPlayerArea.contains(button)) {
              playerIndex = 0;
              console.log('Detected as left player (index 0)');
            } else if (rightPlayerArea && rightPlayerArea.contains(button)) {
              playerIndex = 1;
              console.log('Detected as right player (index 1)');
            }
          }

          console.log('Found player index:', playerIndex);

          if (playerIndex !== null) {
            console.log(`Extracting deck for ${playerName} (player ${playerIndex}):`);
            
            let mainDeck = [];
            let extraDeck = [];

            // Get main deck (index 5 for player 0, index 6 for player 1)
            const mainDeckIndex = playerIndex === 0 ? 5 : 6;
            const mainDeckData = Game.replayMessages[mainDeckIndex];
            console.log(`Main deck index ${mainDeckIndex}:`, mainDeckData);
            console.log('Has cards property:', mainDeckData && mainDeckData.cards);
            console.log('Cards array:', mainDeckData && mainDeckData.cards);
            
            if (mainDeckData && mainDeckData.cards) {
              console.log(`Main deck data for player ${playerIndex}:`, mainDeckData);
              mainDeck = mainDeckData.cards.map(card => card.code).filter(code => code);
              // Sort main deck codes numerically for better organization
              mainDeck.sort((a, b) => parseInt(a) - parseInt(b));
            } else {
              console.log('Main deck data not found or invalid');
            }

            // Get extra deck (index 7 for player 0, index 8 for player 1)
            const extraDeckIndex = playerIndex === 0 ? 7 : 8;
            const extraDeckData = Game.replayMessages[extraDeckIndex];
            console.log(`Extra deck index ${extraDeckIndex}:`, extraDeckData);
            console.log('Has cards property:', extraDeckData && extraDeckData.cards);
            
            if (extraDeckData && extraDeckData.cards) {
              console.log(`Extra deck data for player ${playerIndex}:`, extraDeckData);
              extraDeck = extraDeckData.cards.map(card => card.code).filter(code => code);
              // Sort extra deck codes numerically for better organization
              extraDeck.sort((a, b) => parseInt(a) - parseInt(b));
            } else {
              console.log('Extra deck data not found or invalid');
            }

            const totalCards = mainDeck.length + extraDeck.length;
            
            if (totalCards > 0) {
              // Format as YDK
              let ydkContent = "#generated by essaalfan.com\n#main\n";
              ydkContent += mainDeck.join('\n');
              ydkContent += "\n#extra\n";
              ydkContent += extraDeck.join('\n');

              // Download the file
              const blob = new Blob([ydkContent], { type: 'text/plain' });
              const url = URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = `${playerName}_deck.ydk`;
              a.style.display = 'none';
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              URL.revokeObjectURL(url);
              
              console.log(`Downloaded deck for ${playerName} with ${totalCards} cards`);
            } else {
              Swal.fire({
                title: 'No Cards Found',
                text: `No valid cards found for ${playerName}`,
                icon: 'warning',
                confirmButtonText: 'OK'
              });
            }
          } else {
            Swal.fire({
              title: 'Player Data Not Found',
              text: `Could not find deck data for ${playerName}`,
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        } else {
          Swal.fire({
            title: 'Game Data Not Available',
            text: 'Game object is not available. Please try refreshing the page.',
            icon: 'info',
            confirmButtonText: 'OK'
          });
        }
      } catch (error) {
        console.error('Error extracting deck:', error);
        Swal.fire({
          title: 'Error',
          text: `Error extracting deck for ${playerName}: ${error.message}`,
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    });

    return button;
  }

  // Wait for Game object to be available
  function waitForGameAndAddButtons() {
    let attempts = 0;
    const maxAttempts = 50; // 5 seconds max wait
    
    const checkGame = () => {
      attempts++;
      console.log(`Attempt ${attempts}: Checking for Game object...`);
      
      if (typeof Game !== 'undefined' && Game.replayMessages && Game.replayMessages.length >= 4) {
        console.log('Game object found!', Game);
        addDownloadButtons();
      } else if (attempts >= maxAttempts) {
        console.log('Game object not found after max attempts, proceeding with fallback names');
        addDownloadButtons();
      } else {
        setTimeout(checkGame, 100);
      }
    };
    checkGame();
  }

  // Add download buttons to player areas
  function addDownloadButtons() {
    console.log('Starting to add download buttons...');
    console.log('Game object available at init:', typeof Game);
    
    try {
      // Get player names from Game.replayMessages instead of DOM
      let player1Name = 'Player 1';
      let player2Name = 'Player 2';
      
      if (typeof Game !== 'undefined' && Game.replayMessages && Game.replayMessages.length >= 4) {
        player1Name = Game.replayMessages[2].name;  // PROZ_ESSA
        player2Name = Game.replayMessages[3].name;  // Grigro
        console.log('Using player names from replayMessages:', player1Name, player2Name);
      } else {
        console.log('Game.replayMessages not available, using fallback names');
      }
      
      // Find player avatar areas
      const leftPlayerArea = document.querySelector('.game-avatar-area.game-avatar-left');
      const rightPlayerArea = document.querySelector('.game-avatar-area.game-avatar-right');
      
      if (leftPlayerArea) {
        const button1 = createDownloadButton(player1Name);
        leftPlayerArea.appendChild(button1);
        console.log('Added button for player 1:', player1Name);
      }
      
      if (rightPlayerArea) {
        const button2 = createDownloadButton(player2Name);
        rightPlayerArea.appendChild(button2);
        console.log('Added button for player 2:', player2Name);
      }

      console.log('Download buttons added successfully');
    } catch (error) {
      console.error('Error adding download buttons:', error);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', waitForGameAndAddButtons);
  } else {
    waitForGameAndAddButtons();
  }
})();